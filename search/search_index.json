{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lifter API Lifter API Documentation Did you mean Lifter API Wrapper Documentation ? Hosting This is hosted on Digital Ocean's App Platform . Code changes to this repository on the main branch will automatically trigger changes to the live web application. The backend API and the frontend are set up on their own apps. And there is set up required (see below). Normally, this is first time. Setting up the Backend 1. Run command This is the run command: gunicorn --worker-tmp-dir /dev/shm config.wsgi Note the config.wsgi 2. API Domain Ensure the domain provided this is set to: https://api.lifter.shivan.xyz . This may take time to configure. And this is all handled by Digital Ocean. 3. Backend Environment Variables The following environment variables should be set: DJANGO_DEVELOPMENT = 0 ALLOWED_HOSTS = ${APP_DOMAIN} DATABASE_URL = ${db.DATABASE_URL} CORS_ALLOWED_ORIGINS = https://lifter.shivan.xyz SECRET_KEY = <see below> HASHID_FIELD_SALT = <see below> SENTRY_DSN_1 = <see below> SENTRY_DSN_2 = <see below> SENTRY_SAMPLE_RATE = 1.0 # depends Secret Keys Running the below code will provide the a random hash to set SECRET_KEY and HASHID_FIELD_SALT . $ make generate-key ffqd6(a-&dqk#znv!4@!1u=&_et9b^wdgpm5cz4=^b=9_3xaux Tip: Use make generate-key | pbcopy on MacOS if you want to copy the key to clipboard. Sentry Environment Variables These are mapped accordingly: sentry_sdk.init( dsn=f\"https://{SENTRY_DSN_1}.ingest.sentry.io/{SENTRY_DSN_2}\", integrations=[ DjangoIntegration(), ], # set this to between 0 and 1.0 when in production trace_sample_rate=SENTRY_SAMPLE_RATE 4. Migrations and Superuser In the console of the Digital Ocean App Platform migrations and a creation of a superuser is required. Migration: python manage.py makemigrations python manage.py migrate Create superuser: python manage.py createsuperuser 5. Debugging There is a debug.log file provided. Use this command to follow the debug log in realtime: tail -f debug.log Setting up the Frontend 1. Catch-all Catch-all needs to be set to index.html . This is because react-router uses the url link to decide what content to serve, rather than a url requesting something on the server. That means a url other than the root url will return a 404 error. A catch-all will return the root url for processing by javascript. 2. Main Domain Another domain is provided. Ensure this is set to: https://lifter.shivan.xyz . This takes time and is all handled by Digital Ocean. 3. Frontend Environment Variables The environment variables need to be set: REACT_APP_API_URL = \"https://api.lifter.shivan.xyz/v1\" Local Development Base requirements include: Docker v20.10.8 Docker Compose v2.0.0 Node v16.14.2 Python v3.10.0 Here is the rough layout of the application: lifter-api \u251c\u2500\u2500 backend/ \u2502 \u251c\u2500\u2500 ... Django Rest Framework stuff \u251c\u2500\u2500 frontend \u2502 \u251c\u2500\u2500 ... React Typescript TailwindCSS stuff \u2514\u2500\u2500 ...other files The PostgreSQL database runs in a docker container and to start the API all you need to do is run: make run You might have to perform migrations: make migrations There is an API backend as well as a nice looking frontend layout. To run the frontend: make run-frontend Lifter API Wrapper Here is an API wrapper implementation to allow ease of use with the RESTful framework. It is also available on PyPI . You can easily install it: pip install lifter-api-wrapper","title":"Home"},{"location":"#lifter-api","text":"","title":"Lifter API"},{"location":"#lifter-api-documentation","text":"Did you mean Lifter API Wrapper Documentation ?","title":"Lifter API Documentation"},{"location":"#hosting","text":"This is hosted on Digital Ocean's App Platform . Code changes to this repository on the main branch will automatically trigger changes to the live web application. The backend API and the frontend are set up on their own apps. And there is set up required (see below). Normally, this is first time.","title":"Hosting"},{"location":"#setting-up-the-backend","text":"","title":"Setting up the Backend"},{"location":"#1-run-command","text":"This is the run command: gunicorn --worker-tmp-dir /dev/shm config.wsgi Note the config.wsgi","title":"1. Run command"},{"location":"#2-api-domain","text":"Ensure the domain provided this is set to: https://api.lifter.shivan.xyz . This may take time to configure. And this is all handled by Digital Ocean.","title":"2. API Domain"},{"location":"#3-backend-environment-variables","text":"The following environment variables should be set: DJANGO_DEVELOPMENT = 0 ALLOWED_HOSTS = ${APP_DOMAIN} DATABASE_URL = ${db.DATABASE_URL} CORS_ALLOWED_ORIGINS = https://lifter.shivan.xyz SECRET_KEY = <see below> HASHID_FIELD_SALT = <see below> SENTRY_DSN_1 = <see below> SENTRY_DSN_2 = <see below> SENTRY_SAMPLE_RATE = 1.0 # depends","title":"3. Backend Environment Variables"},{"location":"#secret-keys","text":"Running the below code will provide the a random hash to set SECRET_KEY and HASHID_FIELD_SALT . $ make generate-key ffqd6(a-&dqk#znv!4@!1u=&_et9b^wdgpm5cz4=^b=9_3xaux Tip: Use make generate-key | pbcopy on MacOS if you want to copy the key to clipboard.","title":"Secret Keys"},{"location":"#sentry-environment-variables","text":"These are mapped accordingly: sentry_sdk.init( dsn=f\"https://{SENTRY_DSN_1}.ingest.sentry.io/{SENTRY_DSN_2}\", integrations=[ DjangoIntegration(), ], # set this to between 0 and 1.0 when in production trace_sample_rate=SENTRY_SAMPLE_RATE","title":"Sentry Environment Variables"},{"location":"#4-migrations-and-superuser","text":"In the console of the Digital Ocean App Platform migrations and a creation of a superuser is required. Migration: python manage.py makemigrations python manage.py migrate Create superuser: python manage.py createsuperuser","title":"4. Migrations and Superuser"},{"location":"#5-debugging","text":"There is a debug.log file provided. Use this command to follow the debug log in realtime: tail -f debug.log","title":"5. Debugging"},{"location":"#setting-up-the-frontend","text":"","title":"Setting up the Frontend"},{"location":"#1-catch-all","text":"Catch-all needs to be set to index.html . This is because react-router uses the url link to decide what content to serve, rather than a url requesting something on the server. That means a url other than the root url will return a 404 error. A catch-all will return the root url for processing by javascript.","title":"1. Catch-all"},{"location":"#2-main-domain","text":"Another domain is provided. Ensure this is set to: https://lifter.shivan.xyz . This takes time and is all handled by Digital Ocean.","title":"2. Main Domain"},{"location":"#3-frontend-environment-variables","text":"The environment variables need to be set: REACT_APP_API_URL = \"https://api.lifter.shivan.xyz/v1\"","title":"3. Frontend Environment Variables"},{"location":"#local-development","text":"Base requirements include: Docker v20.10.8 Docker Compose v2.0.0 Node v16.14.2 Python v3.10.0 Here is the rough layout of the application: lifter-api \u251c\u2500\u2500 backend/ \u2502 \u251c\u2500\u2500 ... Django Rest Framework stuff \u251c\u2500\u2500 frontend \u2502 \u251c\u2500\u2500 ... React Typescript TailwindCSS stuff \u2514\u2500\u2500 ...other files The PostgreSQL database runs in a docker container and to start the API all you need to do is run: make run You might have to perform migrations: make migrations There is an API backend as well as a nice looking frontend layout. To run the frontend: make run-frontend","title":"Local Development"},{"location":"#lifter-api-wrapper","text":"Here is an API wrapper implementation to allow ease of use with the RESTful framework. It is also available on PyPI . You can easily install it: pip install lifter-api-wrapper","title":"Lifter API Wrapper"},{"location":"about/","text":"About The goal of Lifter API is to make Weightlifting Competition results more accessible. The origin story goes, we were tired of viewing competition results on .pdf and Excel files. It was also difficult to determine records, and gradings.","title":"About"},{"location":"about/#about","text":"The goal of Lifter API is to make Weightlifting Competition results more accessible. The origin story goes, we were tired of viewing competition results on .pdf and Excel files. It was also difficult to determine records, and gradings.","title":"About"},{"location":"how/","text":"How It Works Overview The API consists of three models: Athlete , Competition , and Lift Determining the Junior/Youth/Senior The API is able to determine if a athlete at the time of the competition date start if they are Youth, Junior and/or Senior. Design choices Female before Male ordering Generally, competitions lift with female first following by males. Data Protection The only data available is the athlete's name, birth year (to determine age grading) and their competitions lifts.","title":"How it works"},{"location":"how/#how-it-works","text":"","title":"How It Works"},{"location":"how/#overview","text":"The API consists of three models: Athlete , Competition , and Lift","title":"Overview"},{"location":"how/#determining-the-junioryouthsenior","text":"The API is able to determine if a athlete at the time of the competition date start if they are Youth, Junior and/or Senior.","title":"Determining the Junior/Youth/Senior"},{"location":"how/#design-choices","text":"","title":"Design choices"},{"location":"how/#female-before-male-ordering","text":"Generally, competitions lift with female first following by males.","title":"Female before Male ordering"},{"location":"how/#data-protection","text":"The only data available is the athlete's name, birth year (to determine age grading) and their competitions lifts.","title":"Data Protection"}]}